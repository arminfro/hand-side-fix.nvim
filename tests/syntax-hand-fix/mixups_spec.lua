local mixups_mod = require("syntax-hand-fix.mixups")
local utils = require("syntax-hand-fix.utils")
require("syntax-hand-fix.utils")

local expected_mixups = {
  us = {
    lua = {
      ["and"] = { "nad", "adn" },
      ["break"] = { "breka" },
      ["do"] = { "od" },
      ["else"] = { "lese", "esle" },
      ["elseif"] = { "leseif", "esleif", "elsief", "elsefi" },
      ["end"] = { "ned", "edn" },
      ["false"] = { "flase", "fasle" },
      ["for"] = { "ofr", "fro" },
      ["function"] = { "ufnction", "fucntion", "funtcion" },
      ["if"] = { "fi" },
      ["local"] = { "lcoal", "locla" },
      ["or"] = { "ro" },
      ["repeat"] = { "rpeeat", "reepat", "repeta" },
      ["return"] = { "rteurn", "retrun", "retunr" },
      ["then"] = { "tehn", "thne" },
      ["true"] = { "rtue", "ture", "treu" },
      ["while"] = { "hwile", "whiel" },
    },
    rust = {
      Self = { "Slef", "Sefl" },
      ["break"] = { "breka" },
      const = { "ocnst", "cosnt", "conts" },
      continue = { "ocntinue", "contineu" },
      crate = { "crtae", "craet" },
      ["else"] = { "lese", "esle" },
      enum = { "neum" },
      extern = { "etxern", "exetrn", "extenr" },
      ["false"] = { "flase", "fasle" },
      fn = { "nf" },
      ["for"] = { "ofr", "fro" },
      ["if"] = { "fi" },
      let = { "elt", "lte" },
      match = { "amtch", "mtach", "macth", "mathc" },
      mod = { "mdo" },
      move = { "mvoe" },
      pub = { "pbu" },
      ["return"] = { "rteurn", "retrun", "retunr" },
      self = { "slef", "sefl" },
      static = { "tsatic", "sattic", "sttaic", "statci" },
      struct = { "tsruct", "srtuct", "sturct", "strcut", "strutc" },
      super = { "usper", "suepr" },
      trait = { "rtait", "triat" },
      ["true"] = { "rtue", "ture", "treu" },
      type = { "tyep" },
      unsafe = { "usnafe" },
      use = { "sue" },
      where = { "hwere", "wehre" },
      ["while"] = { "hwile", "whiel" },
    },
    typescript = {
      abstract = { "abtsract", "absrtact", "abstratc" },
      any = { "nay" },
      arguments = { "arugments", "arguemnts", "argumnets", "argumenst" },
      await = { "awiat" },
      bigint = { "ibgint", "bgiint", "biignt" },
      boolean = { "obolean", "booelan", "boolena" },
      ["break"] = { "breka" },
      catch = { "ctach", "cacth", "cathc" },
      class = { "lcass", "calss" },
      const = { "ocnst", "cosnt", "conts" },
      continue = { "ocntinue", "contineu" },
      debugger = { "deubgger", "debguger" },
      declare = { "delcare", "decalre" },
      delete = { "dleete", "deelte", "deltee", "deleet" },
      ["else"] = { "lese", "esle" },
      export = { "epxort", "exprot", "expotr" },
      extends = { "etxends", "exetnds", "extneds", "extedns" },
      ["false"] = { "flase", "fasle" },
      ["for"] = { "ofr", "fro" },
      ["function"] = { "ufnction", "fucntion", "funtcion" },
      get = { "gte" },
      ["if"] = { "fi" },
      implements = { "impelments", "implmeents", "impleemnts", "implemnets", "implemenst" },
      import = { "improt", "impotr" },
      instanceof = { "isntanceof", "intsanceof", "insatnceof", "instnaceof", "instacneof", "instancoef", "instancefo" },
      interface = { "inetrface" },
      keyof = { "ekyof", "kyeof", "keyfo" },
      let = { "elt", "lte" },
      module = { "mdoule", "moudle", "moduel" },
      namespace = { "anmespace", "nmaespace", "naemspace", "namepsace", "namesapce" },
      never = { "enver" },
      new = { "enw" },
      number = { "nubmer" },
      object = { "boject", "ojbect", "obejct", "objetc" },
      private = { "rpivate", "pirvate", "prviate", "privtae", "privaet" },
      protected = { "rpotected", "portected", "proetcted", "protetced", "protecetd" },
      public = { "pbulic", "pulbic", "publci" },
      readonly = { "reaodnly" },
      require = { "reuqire", "requrie" },
      ["return"] = { "rteurn", "retrun", "retunr" },
      set = { "ste" },
      static = { "tsatic", "sattic", "sttaic", "statci" },
      string = { "tsring", "srting", "stirng", "strign" },
      super = { "usper", "suepr" },
      switch = { "siwtch", "swicth", "swithc" },
      symbol = { "ysmbol", "sybmol", "symobl" },
      this = { "thsi" },
      throw = { "trhow", "thorw", "thrwo" },
      ["true"] = { "rtue", "ture", "treu" },
      try = { "rty", "tyr" },
      type = { "tyep" },
      typeof = { "tyepof", "typoef", "typefo" },
      undefined = { "udnefined", "undeifned", "undefiend" },
      unique = { "unqiue", "uniuqe", "uniqeu" },
      unknown = { "unknwon", "unknonw" },
      void = { "ovid", "vodi" },
      ["while"] = { "hwile", "whiel" },
      yield = { "yeild", "yiled", "yiedl" },
    },
    javascript = {
      arguments = { "arugments", "arguemnts", "argumnets", "argumenst" },
      await = { "awiat" },
      ["break"] = { "breka" },
      catch = { "ctach", "cacth", "cathc" },
      class = { "lcass", "calss" },
      const = { "ocnst", "cosnt", "conts" },
      continue = { "ocntinue", "contineu" },
      debugger = { "deubgger", "debguger" },
      delete = { "dleete", "deelte", "deltee", "deleet" },
      ["else"] = { "lese", "esle" },
      export = { "epxort", "exprot", "expotr" },
      extends = { "etxends", "exetnds", "extneds", "extedns" },
      ["false"] = { "flase", "fasle" },
      ["for"] = { "ofr", "fro" },
      ["function"] = { "ufnction", "fucntion", "funtcion" },
      get = { "gte" },
      ["if"] = { "fi" },
      import = { "improt", "impotr" },
      instanceof = { "isntanceof", "intsanceof", "insatnceof", "instnaceof", "instacneof", "instancoef", "instancefo" },
      let = { "elt", "lte" },
      new = { "enw" },
      private = { "rpivate", "pirvate", "prviate", "privtae", "privaet" },
      protected = { "rpotected", "portected", "proetcted", "protetced", "protecetd" },
      public = { "pbulic", "pulbic", "publci" },
      ["return"] = { "rteurn", "retrun", "retunr" },
      set = { "ste" },
      static = { "tsatic", "sattic", "sttaic", "statci" },
      super = { "usper", "suepr" },
      switch = { "siwtch", "swicth", "swithc" },
      this = { "thsi" },
      throw = { "trhow", "thorw", "thrwo" },
      ["true"] = { "rtue", "ture", "treu" },
      try = { "rty", "tyr" },
      typeof = { "tyepof", "typoef", "typefo" },
      undefined = { "udnefined", "undeifned", "undefiend" },
      ["while"] = { "hwile", "whiel" },
      yield = { "yeild", "yiled", "yiedl" },
    },
    csharp = {
      alias = { "laias", "alais" },
      ascending = { "ascneding", "ascedning", "ascenidng", "ascendign" },
      async = { "aysnc", "asycn" },
      await = { "awiat" },
      by = { "yb" },
      descending = { "descneding", "descedning", "descenidng", "descendign" },
      dynamic = { "ydnamic", "dyanmic", "dynmaic", "dynamci" },
      equals = { "euqals", "eqauls", "equlas", "equasl" },
      from = { "form" },
      get = { "gte" },
      global = { "lgobal", "glboal", "globla" },
      group = { "gorup" },
      let = { "elt", "lte" },
      nameof = { "anmeof", "nmaeof", "naemof", "namoef", "namefo" },
      orderby = { "roderby", "orderyb" },
      partial = { "aprtial", "patrial", "partail", "partila" },
      remove = { "rmeove", "remvoe" },
      select = { "sleect", "seelct", "seletc" },
      set = { "ste" },
      value = { "vlaue", "valeu" },
      when = { "hwen", "wehn", "whne" },
      where = { "hwere", "wehre" },
      yield = { "yeild", "yiled", "yiedl" },
    },
  },
  de = {
    lua = {
      ["and"] = { "nad", "adn" },
      ["break"] = { "breka" },
      ["do"] = { "od" },
      ["else"] = { "lese", "esle" },
      ["elseif"] = { "leseif", "esleif", "elsief", "elsefi" },
      ["end"] = { "ned", "edn" },
      ["false"] = { "flase", "fasle" },
      ["for"] = { "ofr", "fro" },
      ["function"] = { "ufnction", "fucntion", "funtcion" },
      ["if"] = { "fi" },
      ["local"] = { "lcoal", "locla" },
      ["or"] = { "ro" },
      ["repeat"] = { "rpeeat", "reepat", "repeta" },
      ["return"] = { "rteurn", "retrun", "retunr" },
      ["then"] = { "tehn", "thne" },
      ["true"] = { "rtue", "ture", "treu" },
      ["while"] = { "hwile", "whiel" },
    },
    rust = {
      Self = { "Slef", "Sefl" },
      ["break"] = { "breka" },
      const = { "ocnst", "cosnt", "conts" },
      continue = { "ocntinue", "contineu" },
      crate = { "crtae", "craet" },
      ["else"] = { "lese", "esle" },
      enum = { "neum" },
      extern = { "etxern", "exetrn", "extenr" },
      ["false"] = { "flase", "fasle" },
      fn = { "nf" },
      ["for"] = { "ofr", "fro" },
      ["if"] = { "fi" },
      let = { "elt", "lte" },
      match = { "amtch", "mtach", "macth", "mathc" },
      mod = { "mdo" },
      move = { "mvoe" },
      pub = { "pbu" },
      ["return"] = { "rteurn", "retrun", "retunr" },
      self = { "slef", "sefl" },
      static = { "tsatic", "sattic", "sttaic", "statci" },
      struct = { "tsruct", "srtuct", "sturct", "strcut", "strutc" },
      super = { "usper", "suepr" },
      trait = { "rtait", "triat" },
      ["true"] = { "rtue", "ture", "treu" },
      type = { "ytpe", "tpye", "tyep" },
      unsafe = { "usnafe" },
      use = { "sue" },
      where = { "hwere", "wehre" },
      ["while"] = { "hwile", "whiel" },
    },
    typescript = {
      abstract = { "abtsract", "absrtact", "abstratc" },
      any = { "nay", "ayn" },
      arguments = { "arugments", "arguemnts", "argumnets", "argumenst" },
      await = { "awiat" },
      bigint = { "ibgint", "bgiint", "biignt" },
      boolean = { "obolean", "booelan", "boolena" },
      ["break"] = { "breka" },
      catch = { "ctach", "cacth", "cathc" },
      class = { "lcass", "calss" },
      const = { "ocnst", "cosnt", "conts" },
      continue = { "ocntinue", "contineu" },
      debugger = { "deubgger", "debguger" },
      declare = { "delcare", "decalre" },
      delete = { "dleete", "deelte", "deltee", "deleet" },
      ["else"] = { "lese", "esle" },
      export = { "epxort", "exprot", "expotr" },
      extends = { "etxends", "exetnds", "extneds", "extedns" },
      ["false"] = { "flase", "fasle" },
      ["for"] = { "ofr", "fro" },
      ["function"] = { "ufnction", "fucntion", "funtcion" },
      get = { "gte" },
      ["if"] = { "fi" },
      implements = { "impelments", "implmeents", "impleemnts", "implemnets", "implemenst" },
      import = { "improt", "impotr" },
      instanceof = { "isntanceof", "intsanceof", "insatnceof", "instnaceof", "instacneof", "instancoef", "instancefo" },
      interface = { "inetrface" },
      keyof = { "ekyof", "keoyf", "keyfo" },
      let = { "elt", "lte" },
      module = { "mdoule", "moudle", "moduel" },
      namespace = { "anmespace", "nmaespace", "naemspace", "namepsace", "namesapce" },
      never = { "enver" },
      new = { "enw" },
      number = { "nubmer" },
      object = { "boject", "ojbect", "obejct", "objetc" },
      private = { "rpivate", "pirvate", "prviate", "privtae", "privaet" },
      protected = { "rpotected", "portected", "proetcted", "protetced", "protecetd" },
      public = { "pbulic", "pulbic", "publci" },
      readonly = { "reaodnly", "readonyl" },
      require = { "reuqire", "requrie" },
      ["return"] = { "rteurn", "retrun", "retunr" },
      set = { "ste" },
      static = { "tsatic", "sattic", "sttaic", "statci" },
      string = { "tsring", "srting", "stirng", "strign" },
      super = { "usper", "suepr" },
      switch = { "siwtch", "swicth", "swithc" },
      symbol = { "smybol", "sybmol", "symobl" },
      this = { "thsi" },
      throw = { "trhow", "thorw", "thrwo" },
      ["true"] = { "rtue", "ture", "treu" },
      try = { "rty" },
      type = { "ytpe", "tpye", "tyep" },
      typeof = { "ytpeof", "tpyeof", "tyepof", "typoef", "typefo" },
      undefined = { "udnefined", "undeifned", "undefiend" },
      unique = { "unqiue", "uniuqe", "uniqeu" },
      unknown = { "unknwon", "unknonw" },
      void = { "ovid", "vodi" },
      ["while"] = { "hwile", "whiel" },
      yield = { "iyeld", "yeild", "yiled", "yiedl" },
    },
    javascript = {
      arguments = { "arugments", "arguemnts", "argumnets", "argumenst" },
      await = { "awiat" },
      ["break"] = { "breka" },
      catch = { "ctach", "cacth", "cathc" },
      class = { "lcass", "calss" },
      const = { "ocnst", "cosnt", "conts" },
      continue = { "ocntinue", "contineu" },
      debugger = { "deubgger", "debguger" },
      delete = { "dleete", "deelte", "deltee", "deleet" },
      ["else"] = { "lese", "esle" },
      export = { "epxort", "exprot", "expotr" },
      extends = { "etxends", "exetnds", "extneds", "extedns" },
      ["false"] = { "flase", "fasle" },
      ["for"] = { "ofr", "fro" },
      ["function"] = { "ufnction", "fucntion", "funtcion" },
      get = { "gte" },
      ["if"] = { "fi" },
      import = { "improt", "impotr" },
      instanceof = { "isntanceof", "intsanceof", "insatnceof", "instnaceof", "instacneof", "instancoef", "instancefo" },
      let = { "elt", "lte" },
      new = { "enw" },
      private = { "rpivate", "pirvate", "prviate", "privtae", "privaet" },
      protected = { "rpotected", "portected", "proetcted", "protetced", "protecetd" },
      public = { "pbulic", "pulbic", "publci" },
      ["return"] = { "rteurn", "retrun", "retunr" },
      set = { "ste" },
      static = { "tsatic", "sattic", "sttaic", "statci" },
      super = { "usper", "suepr" },
      switch = { "siwtch", "swicth", "swithc" },
      this = { "thsi" },
      throw = { "trhow", "thorw", "thrwo" },
      ["true"] = { "rtue", "ture", "treu" },
      try = { "rty" },
      typeof = { "ytpeof", "tpyeof", "tyepof", "typoef", "typefo" },
      undefined = { "udnefined", "undeifned", "undefiend" },
      ["while"] = { "hwile", "whiel" },
      yield = { "iyeld", "yeild", "yiled", "yiedl" },
    },
    csharp = {
      alias = { "laias", "alais" },
      ascending = { "ascneding", "ascedning", "ascenidng", "ascendign" },
      async = { "asnyc", "asycn" },
      await = { "awiat" },
      descending = { "descneding", "descedning", "descenidng", "descendign" },
      dynamic = { "dnyamic", "dyanmic", "dynmaic", "dynamci" },
      equals = { "euqals", "eqauls", "equlas", "equasl" },
      from = { "form" },
      get = { "gte" },
      global = { "lgobal", "glboal", "globla" },
      group = { "gorup" },
      let = { "elt", "lte" },
      nameof = { "anmeof", "nmaeof", "naemof", "namoef", "namefo" },
      orderby = { "roderby" },
      partial = { "aprtial", "patrial", "partail", "partila" },
      remove = { "rmeove", "remvoe" },
      select = { "sleect", "seelct", "seletc" },
      set = { "ste" },
      value = { "vlaue", "valeu" },
      when = { "hwen", "wehn", "whne" },
      where = { "hwere", "wehre" },
      yield = { "iyeld", "yeild", "yiled", "yiedl" },
    },
  },
}

describe("mixups_mod.get", function()
  it("should return mixups for keywords based on hand sides, the layout and the language", function()
    for layout, expected_mixups_per_layout in pairs(expected_mixups) do
      for language, expected_mixups_per_lang in pairs(expected_mixups_per_layout) do
        local mixups = mixups_mod.get(layout, language)

        for keyword, expected_mixups_list in pairs(expected_mixups_per_lang) do
          if #expected_mixups_list > 0 then
            assert.is_true(mixups[keyword] ~= nil)
            for _, mixup in ipairs(expected_mixups_list) do
              assert.is_true(utils.has_value(mixups[keyword], mixup))
            end
          else
            assert.is_true(mixups[keyword] == nil)
          end
        end
      end
    end
  end)
end)
