return {
  Self = { "Slef", "Sefl" },
  associatedtype = {
    "asosciatedtype",
    "asscoiatedtype",
    "assoicatedtype",
    "assocaitedtype",
    "associatedytpe",
    "associatedtyep",
  },
  ["break"] = { "breka" },
  catch = { "cathc" },
  class = { "lcass", "calss" },
  continue = { "ocntinue", "cotninue", "conitnue", "contineu" },
  default = { "defualt", "defautl" },
  deinit = { "dienit", "deinti" },
  ["do"] = { "od" },
  ["else"] = { "lese", "esle" },
  enum = { "neum" },
  extension = { "extnesion", "extesnion", "extenison" },
  fallthrough = {
    "flalthrough",
    "faltlhrough",
    "fallhtrough",
    "falltrhough",
    "fallthorugh",
    "fallthroguh",
    "fallthrouhg",
  },
  ["false"] = { "flase", "fasle" },
  fileprivate = { "ifleprivate", "fielprivate", "filperivate", "filerpivate", "filepirvate", "fileprviate" },
  ["for"] = { "ofr", "fro" },
  func = { "ufnc", "fucn" },
  guard = { "ugard", "gaurd" },
  ["if"] = { "fi" },
  import = { "improt" },
  init = { "inti" },
  inout = { "inotu" },
  internal = { "itnernal", "intenral", "interanl", "internla" },
  is = { "si" },
  let = { "elt" },
  open = { "oepn", "opne" },
  operator = { "oeprator", "operaotr", "operatro" },
  private = { "rpivate", "pirvate", "prviate" },
  protocol = { "rpotocol", "portocol", "prtoocol", "prootcol", "protcool", "protoocl" },
  public = { "pbulic", "pulbic", "publci" },
  ["repeat"] = { "rpeeat", "reepat" },
  rethrows = { "rehtrows", "retrhows", "rethorws", "rethrwos" },
  ["return"] = { "reutrn", "retrun", "retunr" },
  self = { "slef", "sefl" },
  static = { "staitc", "statci" },
  struct = { "sturct", "strcut" },
  subscript = { "usbscript", "sbuscript", "subscirpt", "subscritp" },
  super = { "usper", "suepr" },
  switch = { "siwtch", "swtich", "swithc" },
  throw = { "htrow", "trhow", "thorw", "thrwo" },
  throws = { "htrows", "trhows", "thorws", "thrwos" },
  ["true"] = { "ture", "treu" },
  try = { "tyr" },
  typealias = { "ytpealias", "tyepalias", "typelaias", "typealais" },
  where = { "hwere", "wehre" },
  ["while"] = { "hwile", "whiel" },
}
